#!/bin/bash
#
# usage: junc [-d] [-j junction-root] [-c name-length] [-C clean] [dir-path]

NC='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
YELLOW='\033[1;33m'

if ! hash cpath 2>/dev/null; then
  >&2 printf "%b- cpath required, installing globally... -%b" "$CYAN" "$NC"
  npm install -g cpath
fi

delete_junc=false
junc_root="/c/junc"
name_length=5
dir_path="$PWD"
clean_flag=false

usage_short="${BLUE}usage: junc [-d] [-j junction-root] [-c name-length] [dir-path]"
usage_long="$usage_short\n-d: delete junction at path (default: $delete_junc)"
usage_long="$usage_long\n-j: path to junction root (default: $junc_root)"
usage_long="$usage_long\n-c: length of randomly generated junction names (default: $name_length)"
usage_long="$usage_long\n-C: cleanup junc directories (default: $clean_flag)"
usage_long="$usage_long\ndir-path: path to directory getting junctioned (default: $dir_path)${NC}"

usage_short="$usage_short\nuse -h to get supported command information.${NC}"

options=":pdj:c:Ch"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    d )
      delete_junc=true
      ;;
    j )
      junc_root="$OPTARG"
      ;;
    c )
      name_length="$OPTARG"
      ;;
    C )
      clean_flag="$OPTARG"
      ;;
    h )
      >&2 printf "%b" "$usage_long" && exit 1
      exit 0
      ;;
    \?)
      >&2 printf "%b" "unknown option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf "%b" "missing option argument for -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf "%b" "unimplemented option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

if [ -n "$1" ] ; then
  dir_path="$1"
  mkdir -p "$dir_path"
  shift
fi

generate_name() {
  < /dev/urandom tr -dc a-z | head -c${1:-32};echo;
}

win_dir_path="$(cpath -w "$dir_path")"

if [ "$delete_junc" = true ] ; then
  cmd //c rmdir "$win_dir_path" &>/dev/null
  exit 0
fi

# Perform junction, loop in case random returns the same name twice
junc_name="$(generate_name "$name_length")"
junc_path="$junc_root/$junc_name"
while [ -e "$junc_path" ] ; do
  junc_name="$(generate_name "$name_length")"
  junc_path="$junc_root/$junc_name"
done

win_junc_path="$(cpath -w "$junc_path")"

mkdir -p "$junc_root" &>/dev/null
cmd //c mklink //J "$win_junc_path" "$win_dir_path" &>/dev/null

printf "%s" "$junc_path"